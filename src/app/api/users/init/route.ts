import { NextResponse } from "next/server";
import prisma from "@/lib/prisma";
import { nanoid } from "nanoid";

export async function POST(req: Request) {
  try {
    const { userId, provider, providerAccountId } = await req.json();

    console.log("üîµ [INIT] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:", { userId, provider, providerAccountId });

    if (!userId || !provider || !providerAccountId) {
      console.warn("‚ö†Ô∏è [INIT] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞");
      return NextResponse.json({ error: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö" }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    const existingUser = await prisma.user.findUnique({
      where: { id: userId },
      select: { role: true, groupId: true, githubId: true, googleId: true },
    });

    if (!existingUser) {
      console.error("‚ùå [INIT] –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
      return NextResponse.json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" }, { status: 404 });
    }

    console.log("üü¢ [INIT] –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ:", existingUser);

    const updateData: any = {};

    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º providerId, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (provider === "github" && !existingUser.githubId) {
      updateData.githubId = providerAccountId;
      updateData.role = "admin";
      console.log("‚úÖ [INIT] –ü—Ä–∏–≤—è–∑–∞–ª–∏ GitHub ID –∏ –Ω–∞–∑–Ω–∞—á–∏–ª–∏ —Ä–æ–ª—å 'admin'");
    }
    if (provider === "google" && !existingUser.googleId) {
      updateData.googleId = providerAccountId;
      updateData.role = "admin";
      console.log("‚úÖ [INIT] –ü—Ä–∏–≤—è–∑–∞–ª–∏ Google ID –∏ –Ω–∞–∑–Ω–∞—á–∏–ª–∏ —Ä–æ–ª—å 'admin'");
    }

    // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!existingUser.groupId) {
      const newGroupId = nanoid(10);
      const newGroup = await prisma.group.create({
        data: {
          id: newGroupId,
          name: `–ì—Ä—É–ø–ø–∞ ${newGroupId}`,
          adminId: userId,
        },
      });

      updateData.groupId = newGroup.id;
      console.log("‚úÖ [INIT] –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –≥—Ä—É–ø–ø–∞:", newGroup);
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å, —á—Ç–æ –æ–±–Ω–æ–≤–ª—è—Ç—å, –≤—ã–ø–æ–ª–Ω—è–µ–º update
    if (Object.keys(updateData).length > 0) {
      await prisma.user.update({
        where: { id: userId },
        data: updateData,
      });
      console.log("‚úÖ [INIT] –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã:", updateData);
      return NextResponse.json({ message: "‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã", updateData });
    }

    console.log("üîπ [INIT] –ù–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.");
    return NextResponse.json({ message: "üîπ –ù–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è" });
  } catch (error) {
    console.error("‚ùå [INIT] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    return NextResponse.json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 });
  }
}