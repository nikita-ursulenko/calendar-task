import { NextResponse } from 'next/server';
import prisma from '@/lib/prisma';

export async function GET(req: Request) {
  const { searchParams } = new URL(req.url);
  const userId = searchParams.get('userId');
  console.log(`üîπ –ü–æ–ª—É—á–µ–Ω–Ω—ã–π userId: ${userId}`);

  if (!userId) {
    console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω userId');
    return NextResponse.json({ error: 'User ID is required' }, { status: 400 });
  }

  try {
    const events = await prisma.event.findMany({
      where: { userId },
      orderBy: { startTime: 'asc' }, // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
    });


    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –Ω—É–∂–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const formattedEvents = events.map(event => {
      const startDate = new Date(event.startTime);
      return {
        id: event.id,
        date: startDate.toLocaleDateString('sv-SE'), // yyyy-mm-dd (–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)
        hour: startDate.getHours(),
        firstName: event.firstName,
        lastName: event.lastName,
        procedure: event.procedure,
        startTime: event.startTime,
        endTime: event.endTime,
        duration: event.duration,
        userId: event.userId,
      };
    });
    return NextResponse.json(formattedEvents, { status: 200 });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π:', error);
    return NextResponse.json({ error: 'Failed to fetch events' }, { status: 500 });
  }
}

export async function POST(req: Request) {
  console.log('üü¢ [POST] –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –ø–æ—Å—Ç—É–ø–∏–ª');

  const requestData = await req.json();

  const { firstName, lastName, procedure, startTime, duration, userId } = requestData;

  if (!firstName || !lastName || !procedure || !startTime || !duration || !userId) {
    console.error('‚ùå –û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
    return NextResponse.json({ error: 'Missing required fields' }, { status: 400 });
  }

  const endTime = new Date(new Date(startTime).getTime() + duration * 60000);

  try {
    const event = await prisma.event.create({
      data: {
        firstName,
        lastName,
        procedure,
        startTime,
        endTime,
        duration,
        userId: userId.toString(),
      },
    });

    return NextResponse.json(event, { status: 201 });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è:', error);
    return NextResponse.json({ error: 'Failed to create event' }, { status: 500 });
  }
}

export async function PUT(req: Request) {
  console.log('üü¢ [PUT] –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –ø–æ—Å—Ç—É–ø–∏–ª');
  
  const requestData = await req.json();

  const { id, firstName, lastName, procedure, startTime, duration, userId } = requestData;

  if (!id || !firstName || !lastName || !procedure || !startTime || !duration || !userId) {
    console.error('‚ùå –û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
    return NextResponse.json({ error: 'Missing required fields' }, { status: 400 });
  }
  const endTime = new Date(new Date(startTime).getTime() + duration * 60000);

  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    const event = await prisma.event.findUnique({
      where: { id: id.toString() },
    });

    if (!event) {
      console.error('‚ùå –û—à–∏–±–∫–∞: –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return NextResponse.json({ error: 'Event not found' }, { status: 404 });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if (event.userId !== userId) {
      console.error('‚ùå –û—à–∏–±–∫–∞: –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å —á—É–∂–æ–µ —Å–æ–±—ã—Ç–∏–µ');
      return NextResponse.json({ error: 'Unauthorized' }, { status: 403 });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    const updatedEvent = await prisma.event.update({
      where: { id: id.toString() },
      data: {
        firstName,
        lastName,
        procedure,
        startTime: new Date(startTime),
        endTime,
        duration,
      },
    });

    return NextResponse.json(updatedEvent);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è:', error);
    return NextResponse.json({ error: 'Failed to update event' }, { status: 500 });
  }
}

export async function DELETE(req: Request) {

  const requestData = await req.json();

  const { id, userId } = requestData;

  if (!id || !userId) {
    console.error('‚ùå –û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (id –∏–ª–∏ userId)');
    return NextResponse.json({ error: 'Missing required fields' }, { status: 400 });
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–±—ã—Ç–∏–µ —Å –¥–∞–Ω–Ω—ã–º id
    const event = await prisma.event.findUnique({
      where: { id: id.toString() },
    });

    if (!event) {
      console.error(`‚ùå –û—à–∏–±–∫–∞: –°–æ–±—ã—Ç–∏–µ —Å id ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
      return NextResponse.json({ error: 'Event not found' }, { status: 404 });
    }


    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ —Å–æ–±—ã—Ç–∏–µ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (event.userId !== userId) {
      console.error(`‚ùå –û—à–∏–±–∫–∞: –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —á—É–∂–æ–µ —Å–æ–±—ã—Ç–∏–µ (event.userId: ${event.userId}, userId: ${userId})`);
      return NextResponse.json({ error: 'Unauthorized' }, { status: 403 });
    }


    // –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
    await prisma.event.delete({
      where: { id: id.toString() },
    });


    return NextResponse.json({ message: 'Event deleted successfully' }, { status: 200 });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è:', error);
    return NextResponse.json({ error: 'Failed to delete event' }, { status: 500 });
  }
}