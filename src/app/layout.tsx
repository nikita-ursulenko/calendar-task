"use client";

import { SessionProvider, useSession } from "next-auth/react";
import { QueryProvider } from "@/app/_providers/query-provider";
import { usePathname, useRouter } from "next/navigation";
import React, { useState, useEffect } from "react";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { LoadingScreen } from "@/components/LoadingScreen";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

const AuthGuard = ({ children }: { children: React.ReactNode }) => {
  const { data: session, status } = useSession();
  const router = useRouter();
  const pathname = usePathname();

  const isAuthPage =
    pathname.startsWith("/auth/login") || pathname.startsWith("/auth/register");

  const [loading, setLoading] = useState(true); // –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏
  const [redirected, setRedirected] = useState(false); // –°—Ç–∞—Ç—É—Å —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞

  useEffect(() => {
    console.log("üîç [AuthGuard] useEffect —Å—Ä–∞–±–æ—Ç–∞–ª");
    console.log("üìç –ü—É—Ç—å:", pathname);
    console.log("üîê –°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏:", status);
    console.log("üß≠ –≠—Ç–æ auth-—Å—Ç—Ä–∞–Ω–∏—Ü–∞?", isAuthPage);
    console.log("üîÅ –£–∂–µ –±—ã–ª —Ä–µ–¥–∏—Ä–µ–∫—Ç?", redirected);

    const timer = setTimeout(() => {
      console.log("‚è≥ –¢–∞–π–º–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–µ—Ä—à—ë–Ω");
      setLoading(false);
    }, 1500);

    if (status === "unauthenticated" && !isAuthPage && !redirected) {
      console.log("üö´ –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø ‚Äî –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /auth/login");
      setRedirected(true);
      router.push("/auth/login");
    }

    return () => {
      console.log("üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–∞");
      clearTimeout(timer);
    };
  }, [status, pathname, router, redirected]);

  if (status === "loading" || loading) {
    console.log("‚è≥ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏...");
    return <LoadingScreen />;
  }

  console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç.");
  return <>{children}</>;
};

export default function RootLayout({
  children,
  session,
}: {
  children: React.ReactNode;
  session: any;
}) {

  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <SessionProvider session={session}>
          <QueryProvider>
            <AuthGuard>{children}</AuthGuard>
          </QueryProvider>
        </SessionProvider>
      </body>
    </html>
  );
}