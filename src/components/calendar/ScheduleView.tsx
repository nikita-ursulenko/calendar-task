import React, { useEffect, useState } from "react";
import { Dayjs } from "dayjs";
import { useAppSession } from "@/entities/session/use-app-session";
import "./ScheduleView.css";
import useUniqueEventColor from "@/hooks/useUniqueEventColor"; // –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–∞—à —Ö—É–∫
import { FaTimes } from "react-icons/fa";

// –ü—Ä–æ–ø—Å—ã
interface ScheduleViewProps {
  // –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å null, –µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞)
  selectedDate: Dayjs | null;

  // –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –æ—Ç–∫—Ä—ã—Ç –ª–∏ —Ä–µ–∂–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
  isScheduleOpen: boolean;

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
  setSelectedDate: (date: Dayjs) => void;

  // –û–±—ä–µ–∫—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å–æ–±—ã—Ç–∏—è, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∫–ª—é—á—É (–æ–±—ã—á–Ω–æ —ç—Ç–æ –¥–∞—Ç–∞)
  events: {
    [key: string]: {
      id: string; // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–±—ã—Ç–∏—è
      time: string; // –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏
      firstName: string; // –ò–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–æ–±—ã—Ç–∏—è
      lastName: string; // –§–∞–º–∏–ª–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–æ–±—ã—Ç–∏—è
      procedure: string; // –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç—Ä–∏–∂–∫–∞, –º–∞–Ω–∏–∫—é—Ä –∏ —Ç. –¥.)
      duration: number; // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö
    };
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
  addEvent: (
    date: string, // –î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏
    time: string, // –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
    firstName: string, // –ò–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
    lastName: string, // –§–∞–º–∏–ª–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
    procedure: string, // –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
    duration: number,
    activeUserId: string // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö
  ) => void;
  

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
  editEvent: (
    id: string, // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–±—ã—Ç–∏—è
    date: string, // –ù–æ–≤–∞—è –¥–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è
    time: string, // –ù–æ–≤–æ–µ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
    firstName: string, // –û–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
    lastName: string, // –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Ñ–∞–º–∏–ª–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
    procedure: string, // –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞
    duration: number, // –ù–æ–≤–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è
    userId: string // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–Ω–æ—Å—è—â–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  ) => void;

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
  deleteEvent: (
    id: string, // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–±—ã—Ç–∏—è
    userId: string // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É–¥–∞–ª—è—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏–µ
  ) => void;

  activeUserId: string | null;
}

const ScheduleView: React.FC<ScheduleViewProps> = ({
  selectedDate,
  isScheduleOpen,
  setSelectedDate,
  events,
  addEvent,
  editEvent,
  deleteEvent,
  activeUserId,
}) => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç–∏–µ–º/–∑–∞–∫—Ä—ã—Ç–∏–µ–º –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ–±—ã—Ç–∏—è
  const [isEventModalOpen, setIsEventModalOpen] = useState(false);
  
  const { getUniqueEventColor } = useUniqueEventColor(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const session = useAppSession();
  const userId = session.data?.user.id;

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
  const [eventData, setEventData] = useState({
    time: "", // –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
    firstName: "", // –ò–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
    lastName: "", // –§–∞–º–∏–ª–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
    procedure: "", // –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
    duration: 0, // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π
  const [forceRender, setForceRender] = useState(0);

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ—Ä–µ–Ω–¥–µ—Ä –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π
  useEffect(() => {
    console.log("üîÑ ScheduleView –æ–±–Ω–æ–≤–∏–ª—Å—è! –ù–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è:", events);
    setForceRender((prev) => prev + 1);
  }, [events]);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —è—á–µ–π–∫–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞)
  const [selectedCell, setSelectedCell] = useState<string | null>(null);

  // –ù–∞–±–æ—Ä –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π)
  const mergedCells = new Set();

  // –ï—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –∏–ª–∏ –¥–∞—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è
  if (!isScheduleOpen || !selectedDate) return null;

  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
  const openEventModal = (date: string, hour: number, minutes?: number) => {
    const formattedHour = hour.toString().padStart(2, "0");
    const formattedMinutes = minutes !== undefined ? minutes.toString().padStart(2, "0") : "00";
    const key = `${date} ${formattedHour}:${formattedMinutes}`;
    
    console.log("OpenModal Key: ", key)
    console.log("OpenModal events: ", events )
    console.log("üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ –∫–ª—é—á—É:", key, events[key]);
    setSelectedCell(key);
    setIsEventModalOpen(true);
  
    if (events[key]) {
      console.log("üü¢ –û—Ç–∫—Ä—ã—Ç–æ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", events[key]);
      setEventData({
        time: events[key].time,
        firstName: events[key].firstName,
        lastName: events[key].lastName,
        procedure: events[key].procedure,
        duration: events[key].duration,
      });
    } else {
      console.log("üü° –û—Ç–∫—Ä—ã—Ç–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.");
      setEventData({
        time: `${hour}:${formattedMinutes}`, // –î–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω—É—Ç—ã
        firstName: "",
        lastName: "",
        procedure: "",
        duration: 0,
      });
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è
  const closeEventModal = () => {
    setIsEventModalOpen(false);
    setEventData({ time: "", firstName: "", lastName: "", procedure: "", duration: 0 });
    console.log("‚ö™ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ.");
  };

  const handleEventSave = async () => {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è eventData
    const { time, firstName, lastName, procedure, duration } = eventData;
  
    if (!selectedCell) {
      console.log("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —è—á–µ–π–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.");
      return;
    }
  
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ –∫–ª—é—á–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —è—á–µ–π–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2025-03-19 14:00" -> "2025-03-19")
    const date = selectedCell.split(" ")[0];
  
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –≤ –º–∏–Ω—É—Ç—ã —Å –Ω–∞—á–∞–ª–∞ –¥–Ω—è
    const [eventHour, eventMinutes] = time.split(":").map(Number);
    const newEventStart = eventHour * 60 + eventMinutes;
    const newEventEnd = newEventStart + duration;
  
    console.log("‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è...");
    let hasOverlap = false;
  
    Object.keys(events).forEach((eventKey) => {
      const [eventDate, eventTime] = eventKey.split(" ");
      if (eventDate === date) {
        const [eHour, eMinutes] = events[eventKey].time.split(":").map(Number);
        const existingStart = eHour * 60 + eMinutes;
        const existingEnd = existingStart + events[eventKey].duration;
  
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
        if (
          (newEventStart >= existingStart && newEventStart < existingEnd) || // –ù–∞—á–∞–ª–æ –≤–Ω—É—Ç—Ä–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
          (newEventEnd > existingStart && newEventEnd <= existingEnd) || // –ö–æ–Ω–µ—Ü –≤–Ω—É—Ç—Ä–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
          (newEventStart <= existingStart && newEventEnd >= existingEnd) // –ü–æ–ª–Ω–æ–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ
        ) {
          console.log("‚ùå –ö–æ–Ω—Ñ–ª–∏–∫—Ç —Å —Å–æ–±—ã—Ç–∏–µ–º:", events[eventKey]);
          hasOverlap = true;
        }
      }
    });
  
    if (hasOverlap) {
      console.warn("üö® –û—à–∏–±–∫–∞: –í—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç! –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.");
      return;
    }
  
    console.log("‚úÖ –ù–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π. –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–æ–±—ã—Ç–∏–µ!");
  
    // –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
    if (events[selectedCell]) {
      const eventId = events[selectedCell].id;
  
      if (userId) {
        await editEvent(
          eventId,
          date,
          time,
          firstName,
          lastName,
          procedure,
          duration,
          userId
        );
  
        console.log("üü£ –°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!");
      } else {
        console.error("‚ùå User ID is undefined");
      }
    } else {
      if (!activeUserId) {
        console.error("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ: activeUserId –Ω–µ –∑–∞–¥–∞–Ω");
        return;
      }
      // –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏—è –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
      await addEvent(date, time, firstName, lastName, procedure, duration, activeUserId);
      console.log("üìå –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ:", {
        date,
        time,
        firstName,
        lastName,
        procedure,
        duration,
      });
      console.log("üìå –ü–æ–ª–Ω—ã–π –∫–ª—é—á (selectedCell):", selectedCell);
      console.log("üìå userId –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", userId);
    }
  
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    closeEventModal();
  };
  
  return (
    <div className="mt-4 flex flex-col h-full">
      <div className="flex justify-between items-center mb-2">
        <button onClick={() => setSelectedDate(selectedDate?.subtract(4, "day"))} className="text-blue-600 p-2 hover:bg-blue-100 rounded">
          {"< –ù–∞–∑–∞–¥"}
        </button>
        <button onClick={() => setSelectedDate(selectedDate?.add(4, "day"))} className="text-blue-600 p-2 hover:bg-blue-100 rounded">
          {"–í–ø–µ—Ä–µ–¥ >"}
        </button>
      </div>

      <div className="schedule-container">
        <div className="schedule-grid">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ */}
          <div className="time-header">–í—Ä–µ–º—è</div>

          {/* –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π (4 –¥–Ω—è –Ω–∞—á–∏–Ω–∞—è —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã) */}
          {[...Array(4)].map((_, index) => (
            <div key={index} className="day-header">
              {/* –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É: –¥–æ–±–∞–≤–ª—è–µ–º `index` –¥–Ω–µ–π –∫ `selectedDate`, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –¥–Ω–∏ */}
              {selectedDate?.add(index, "day")?.format("DD MMMM")}
            </div>
          ))}

          {/* –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ 24 —á–∞—Å–∞ –≤ –¥–µ–Ω—å */}
          {[...Array(24)].map((_, hour) => (
            <React.Fragment key={`hour-${hour}`}>
              {/* –ö–æ–ª–æ–Ω–∫–∞ —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏ (00:00 - 23:00) */}
              <div className="time-cell">{`${hour}:00`}</div>

              {/* –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —è—á–µ–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ 4 –¥–Ω–µ–π */}
              {[...Array(4)].map((_, index) => {
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É (YYYY-MM-DD), —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –¥–∞–Ω–Ω–æ–π —è—á–µ–π–∫–µ
                const currentDate = selectedDate?.add(index, "day").format("YYYY-MM-DD");

                /**
                 * –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏—è:
                 *  - –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–±—ã—Ç–∏–µ –≤ —Å–ø–∏—Å–∫–µ `events`
                 *  - –ö–ª—é—á —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –¥–∞—Ç—ã –∏ —á–∞—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2025-03-19 14:00")
                 *  - –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏—è –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –∫–ª—é—á –¥–ª—è –ø—É—Å—Ç–æ–π —è—á–µ–π–∫–∏
                 */
                // –ù–∞—Ö–æ–¥–∏–º –í–°–ï —Å–æ–±—ã—Ç–∏—è, —É –∫–æ—Ç–æ—Ä—ã—Ö eventHour === hour (–≤—Å–µ —Å–æ–±—ã—Ç–∏—è –≤ –æ–¥–Ω–æ–º —á–∞—Å—É)
                let eventsInThisHour = Object.keys(events).filter((eKey) => {
                  const [eventDate, eventTime] = eKey.split(" ");
                  const [eventHour] = eventTime.split(":").map(Number);
                  
                  return eventDate === currentDate && eventHour === hour;
                });

                // –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á `hour:00`
                let key = eventsInThisHour.length > 0 ? eventsInThisHour[0] : `${currentDate} ${hour}:00`;
                // –ï—Å–ª–∏ —ç—Ç–∞ —è—á–µ–π–∫–∞ —É–∂–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∞ –≤ –¥—Ä—É–≥–æ–π (–º–Ω–æ–≥–æ—á–∞—Å–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—ë
                if (mergedCells.has(key)) return null;

                /**
                 * –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Å–ª–æ—Ç—É:
                 * - –õ–∏–±–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –ø–æ `key`
                 * - –õ–∏–±–æ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç, –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏—è –Ω–µ—Ç
                 */
                const event = events[key] || events[`${currentDate} ${hour}:00`] || null;

                /**
                 * –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Å–æ—Ç—É (rowSpan) —è—á–µ–π–∫–∏:
                 * - –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –µ—Å—Ç—å, –≤—ã—á–∏—Å–ª—è–µ–º `rowSpan`, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –µ–≥–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–≤ —á–∞—Å–∞—Ö)
                 * - –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏—è –Ω–µ—Ç, `rowSpan` = 1 (–æ–±—ã—á–Ω–∞—è 1-—á–∞—Å–æ–≤–∞—è —è—á–µ–π–∫–∞)
                 */ // –û—Å—Ç–∞–≤—à–∏–µ—Å—è –º–∏–Ω—É—Ç—ã (–Ω–µ–ø–æ–ª–Ω—ã–π —á–∞—Å)
                const rowSpan = Math.ceil(event?.duration / 60) || 1; // –û–∫—Ä—É–≥–ª—è–µ–º –≤–≤–µ—Ä—Ö, —á—Ç–æ–±—ã –∑–∞–Ω—è—Ç—å –Ω—É–∂–Ω—ã–µ —Å–ª–æ—Ç—ã

                /**
                 * –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –≤ `mergedCells`,
                 * —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏–ª–∏—Å—å –æ—Ç–¥–µ–ª—å–Ω–æ (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —è—á–µ–µ–∫)
                 */
                if (event && event.duration) {
                  for (let i = 1; i < rowSpan; i++) {
                    mergedCells.add(`${currentDate} ${hour + i}:00`);
                  }
                }

                const cellHeight = 50; // üîπ –í—ã—Å–æ—Ç–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (1 —á–∞—Å) –≤ –ø–∏–∫—Å–µ–ª—è—Ö. 
                // –≠—Ç–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—ã—Å–æ—Ç—ã —Å–æ–±—ã—Ç–∏–π –∏ –∏—Ö —Å–º–µ—â–µ–Ω–∏—è –≤–Ω–∏–∑.
                // –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –¥–ª–∏—Ç—Å—è 1 —á–∞—Å (60 –º–∏–Ω—É—Ç), –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –∑–∞–Ω–∏–º–∞—Ç—å `50px`.
                // –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –¥–ª–∏—Ç—Å—è 30 –º–∏–Ω—É—Ç, –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –∑–∞–Ω–∏–º–∞—Ç—å `25px` (50px * 0.5).

                
                return (
                  <div
                    key={`${key}-${event?.id || "empty"}`} // üîπ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è React (–Ω—É–∂–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞).
                    className="schedule-cell relative" // üîπ CSS-–∫–ª–∞—Å—Å schedule-cell —Å `position: relative` (–≤–∞–∂–Ω–æ –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è `absolute` –≤–Ω—É—Ç—Ä–∏).
                    style={{
                      gridRow: `span ${rowSpan}`, // üîπ –£–∫–∞–∑—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ (`rowSpan`) –∑–∞–Ω–∏–º–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ CSS Grid.
                      // –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ `rowSpan = 2`, —Ç–æ —Å–æ–±—ã—Ç–∏–µ –∑–∞–π–º–µ—Ç 2 —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ (—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ 2 —á–∞—Å–∞–º).
                      // `rowSpan` —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ `event.duration / 60`, –æ–∫—Ä—É–≥–ª—è–µ—Ç—Å—è –≤–≤–µ—Ä—Ö —Å –ø–æ–º–æ—â—å—é `Math.ceil()`.
                    }}
                    
                    
                    // üîπ –ü—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —è—á–µ–π–∫—É –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è.
                    onClick={() => {
                      const [hour] = key.split(" ")[1].split(":").map(Number);
                      console.log("üü° –ö–ª–∏–∫ –ø–æ —è—á–µ–π–∫–µ:", { key, hour });
                      console.log("üìå selectedCell –ø–µ—Ä–µ–¥ openEventModal:", key);
                      openEventModal(currentDate, hour);
                    }}
                  
                  
                  >
                    {/* –ï—Å–ª–∏ –≤ —ç—Ç–æ–º —á–∞—Å–æ–≤–æ–º —Å–ª–æ—Ç–µ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏–π, —Ä–µ–Ω–¥–µ—Ä–∏–º –∏—Ö –í–°–ï */}
                    {eventsInThisHour.map((eventKey) => {
                      const event = events[eventKey];

                      return (
                        <div
                          key={event.id}
                          className={`event-cell ${getUniqueEventColor(event.id)}`}
                          style={{
                            zIndex: 10,
                            height: `${(event.duration / 60) * cellHeight - 3}px`,
                            top: `${(parseInt(event.time.split(":")[1]) / 60) * cellHeight}px`,
                          }}
                          onClick={(e) => {
                            e.stopPropagation();
                            const [hour, minutes] = event.time.split(":").map(Number);
                            console.log("–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –æ–∫–Ω–æ —Å–æ–±—ã—Ç–∏—è, currentDate: ", hour, minutes);
                            openEventModal(currentDate, hour, minutes);
                          }}
                        >
                          {event.procedure} ({event.duration} –º–∏–Ω)
                        </div>
                      );
                    })}
                  </div>
                );
              })}
            </React.Fragment>
          ))}
        </div>
      </div>

      {isEventModalOpen && (
        // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω, –Ω–∞–∫—Ä—ã–≤–∞—é—â–∏–π –≤–µ—Å—å —ç–∫—Ä–∞–Ω –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–æ–º –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
        <div className="absolute top-0 left-0 w-full h-full bg-black/30 backdrop-blur-xs flex justify-center items-center z-50">
          
          {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ */}
          <div className="relative bg-white p-6 rounded-lg w-96">
            <button
              className="absolute top-3 right-3 text-gray-500 hover:text-gray-700 p-2 rounded-full transition-all hover:bg-gray-200"
              onClick={closeEventModal}
            >
              <FaTimes className="w-6 h-6" />
            </button>
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ */}
            <h3 className="text-xl mb-4">–°–æ–∑–¥–∞—Ç—å/–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ</h3>

            {/* –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞ */}
            <div className="mb-4">
              <label htmlFor="firstName" className="block text-sm font-semibold">–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞</label>
              <input
                type="text"
                id="firstName"
                value={eventData.firstName} // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                onChange={(e) => setEventData({ ...eventData, firstName: e.target.value })} // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤–≤–æ–¥–µ
                className="w-full p-2 border border-gray-300 rounded"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞"
              />
            </div>

            {/* –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ */}
            <div className="mb-4">
              <label htmlFor="lastName" className="block text-sm font-semibold">–§–∞–º–∏–ª–∏—è –∫–ª–∏–µ–Ω—Ç–∞</label>
              <input
                type="text"
                id="lastName"
                value={eventData.lastName}
                onChange={(e) => setEventData({ ...eventData, lastName: e.target.value })}
                className="w-full p-2 border border-gray-300 rounded"
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∫–ª–∏–µ–Ω—Ç–∞"
              />
            </div>

            {/* –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä—ã */}
            <div className="mb-4">
              <label htmlFor="procedure" className="block text-sm font-semibold">–ü—Ä–æ—Ü–µ–¥—É—Ä–∞</label>
              <input
                type="text"
                id="procedure"
                value={eventData.procedure}
                onChange={(e) => setEventData({ ...eventData, procedure: e.target.value })}
                className="w-full p-2 border border-gray-300 rounded"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É"
              />
            </div>

            {/* –ü–æ–ª–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ (—á–∞—Å—ã —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ, –º–∏–Ω—É—Ç—ã –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å) */}
            <div className="mb-4">
              <label htmlFor="startTime" className="block text-sm font-semibold">–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞</label>
              <div className="flex items-center">
                
                {/* –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª–µ —Å —á–∞—Å–∞–º–∏ (–∏–∑ `selectedCell`) */}
                <span className="p-2 border border-gray-300 rounded-l bg-gray-100 w-12 text-center">
                  {selectedCell?.split(" ")[1].split(":")[0] || "00"} {/* –ë–µ—Ä–µ–º —á–∞—Å—ã –∏–∑ `selectedCell` */}
                </span>

                {/* –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –º–∏–Ω—É—Ç (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å) */}
                <input
                  type="number"
                  id="startTime"
                  value={eventData.time.split(":")[1] || "00"} // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–∏–Ω—É—Ç—ã –∏–ª–∏ "00"
                  onChange={(e) => {
                    let minutes = parseInt(e.target.value, 10);
                    if (isNaN(minutes)) minutes = 0; // –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0
                    if (minutes < 0) minutes = 0; // –ú–∏–Ω—É—Ç—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏
                    if (minutes > 59) minutes = 59; // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ 59 –º–∏–Ω—É—Ç

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –º–∏–Ω—É—Ç—ã, –æ—Å—Ç–∞–≤–ª—è—è —á–∞—Å—ã –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º–∏
                    setEventData((prev) => ({
                      ...prev,
                      time: `${prev.time.split(":")[0]}:${minutes.toString().padStart(2, "0")}`,
                    }));
                  }}
                  className="w-16 p-2 border border-gray-300 rounded-r text-center"
                  min="0"
                  max="59"
                  placeholder="00"
                />
              </div>
            </div>

            {/* –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–±—ã—Ç–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö */}
            <div className="mb-4">
              <label htmlFor="duration" className="block text-sm font-semibold">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–≤ –º–∏–Ω—É—Ç–∞—Ö)</label>
              <input
                type="number"
                id="duration"
                value={eventData.duration}
                onChange={(e) => setEventData({ ...eventData, duration: +e.target.value })}
                className="w-full p-2 border border-gray-300 rounded"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
              />
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–û—Ç–º–µ–Ω–∞, –£–¥–∞–ª–∏—Ç—å, –°–æ—Ö—Ä–∞–Ω–∏—Ç—å) */}
            <div className="flex justify-between">

              {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è (–µ—Å–ª–∏ –æ–Ω–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç) */}
              <button
                onClick={() => {
                  console.log("üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º:");
                  console.log("‚Üí selectedCell:", selectedCell);
                  console.log("‚Üí userId:", userId);
                  console.log("‚Üí —Å–æ–±—ã—Ç–∏–µ:", selectedCell ? events[selectedCell] : null);
                  if (selectedCell && events[selectedCell] && userId) {
                    deleteEvent(events[selectedCell].id, userId); // –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ ID
                    closeEventModal();
                  } else {
                    console.error("‚ùå User ID is undefined or no event selected");
                  }
                }}
                className="bg-red-500 rounded px-4 py-2 text-white"
              >
                –£–¥–∞–ª–∏—Ç—å
              </button>

              {/* –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è */}
              <button onClick={handleEventSave} className="px-4 py-2 bg-blue-600 text-white rounded">
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ScheduleView;

